---
name: Verify Release
on:
  workflow_run:
    workflows: ["Release"]
    types:
      - requested
jobs:
  verify-release:
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    permissions:
      contents: read
      issues: write
    steps:
      - run: echo "$PAYLOAD"
        env:
          PAYLOAD: ${{ toJson(github.event) }}
      # Get Tag
      - id: verify
        env:
          GH_TOKEN: ${{github.token}}
          SHA: ${{github.event.workflow_run.after}}
          EXPECTED_EMAIL: ${{secrets.RELEASE_EMAIL}}
        # .verification.verified
        # .tagger.email
        run: |
          resp=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -q '"\(.verification.verified)/\(.tagger.email)"' \
            "/repos/$GITHUB_REPOSITORY/git/tags/$SHA")
          verified=${resp%/*}
          email=${resp#*/}
          if [ "$verified" != "true" ]; then
            echo "::error:: Tag is not verified"
            echo "verified=false" >> "$GITHUB_OUTPUT"
          fi
          if [ "$email" != "$EXPECTED_EMAIL" ]; then
            echo "::error:: Tagger is unexpected"
            echo "email=false" >> "$GITHUB_OUTPUT"
          fi

      # Get N commits from the default branch and verify the commit SHA
      - id: commit
        env:
          GH_TOKEN: ${{github.token}}
          SHA: ${{github.event.workflow_run.head_sha}}
          LENGTH: 10
        run: |
          repo=${GITHUB_REPOSITORY_NAME#*/}
          shas=$(gh api graphql \
            -F "owner=$GITHUB_REPOSITORY_OWNER" \
            -F "repo=$repo" \
            -F "length=$LENGTH" \
            -q '.data.repository.defaultBranchRef.target.history.edges[].node.oid' \
            -f query='
              query($owner: String!, $repo: String!, $length: Int!) {
                repository(owner: $owner, name: $repo) {
                  defaultBranchRef {
                    target {
                      ... on Commit {
                        history(first: $length) {
                          edges {
                            node {
                              oid
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }')
          echo "---"
          echo "SHAS:"
          echo "$shas"
          echo "---"      
          if !(echo "$shas" | grep -q "$SHA"); then
            echo "::error:: The commit isn't included in the latest $LENGTH commits of the default branch"
            echo "default_branch=false" >> "$GITHUB_OUTPUT"
          fi

      - if: |
          steps.verify.outputs.verified != 'true' || steps.verify.outputs.email != 'true' || steps.commit.outputs.default_branch == 'false'
        env:
          GH_TOKEN: ${{github.token}}
          ISSUE_NUMBER: 1
          EMAIL: ${{steps.verify.outputs.email}}
          VERIFIED: ${{steps.verify.outputs.verified}}
          DEFAULT_BRANCH: ${{steps.commit.outputs.default_branch}}
          LENGTH: 10
        run: |
          tempfile=$(mktemp)
          echo "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> "$tempfile"
          if [ "$EMAIL" != true ]; then
            echo ":x: Tagger email is not expected" >> "$tempfile"
          fi
          if [ "$VERIFIED" != true ]; then
            echo ":x: Tag is not verified" >> "$tempfile"
          fi
          if [ "$DEFAULT_BRANCH" == false ]; then
            echo ":x: The commit isn't included in the latest $LENGTH commits of the default branch" >> "$tempfile"
          fi
          gh issue comment "$ISSUE_NUMBER" -R "$GITHUB_REPOSITORY" -F "$tempfile"
          rm "$tempfile"

      - if: |
          steps.verify.outputs.verified != 'true' || steps.verify.outputs.email != 'true' || steps.commit.outputs.default_branch == 'false'
        id: slack_body
        env:
          EMAIL: ${{steps.verify.outputs.email}}
          VERIFIED: ${{steps.verify.outputs.verified}}
          DEFAULT_BRANCH: ${{steps.commit.outputs.default_branch}}
          LENGTH: 10
        run: |
          tempfile=$(mktemp)
          echo "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> "$tempfile"
          if [ "$EMAIL" != true ]; then
            echo ":x: Tagger email is not expected" >> "$tempfile"
          fi
          if [ "$VERIFIED" != true ]; then
            echo ":x: Tag is not verified" >> "$tempfile"
          fi
          if [ "$DEFAULT_BRANCH" == false ]; then
            echo ":x: The commit isn't included in the latest $LENGTH commits of the default branch" >> "$tempfile"
          fi
          {
            echo 'text<<EOF'
            cat "$tempfile"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT" 
          rm "$tempfile"

      - if: |
          steps.verify.outputs.verified != 'true' || steps.verify.outputs.email != 'true' || steps.commit.outputs.default_branch == 'false'
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: ${{ toJson(steps.slack_body.outputs) }}

      - if: |
          steps.verify.outputs.verified != 'true' || steps.verify.outputs.email != 'true' || steps.commit.outputs.default_branch == 'false'
        run: |
          echo "::error:: The validation failed"
          exit 1
